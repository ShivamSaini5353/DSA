
		//Question 1
		public static boolean isIso(String s, String t) {
	        HashMap<Character, Character> st1=new HashMap<>();
	        HashMap<Character, Boolean> st2=new HashMap<>();
	        for(int i=0; i<s.length(); i++){
	            char ch1=s.charAt(i), ch2=t.charAt(i);
	            if(st1.containsKey(ch1)) {
	            	if(!st2.containsKey(ch2)) return false;
	            	if(st1.get(ch1)!=ch2) return false;
	            }else {
	            	if(st2.containsKey(ch2)) return false;
	            	st1.put(ch1, ch2);
	            	st2.put(ch2, true);
	            }
	            System.out.println(st1+" "+st2);
	        }
	        return true;
	    }
		
		
		 //Question 3
		public static String sumString(String num1, String num2) {
			int carray=0;
			String ans="";
			while(num1.length()!=0 || num2.length()!=0) {
				int one=0;
				if(num1.length()!=0) {
					one=num1.charAt(num1.length()-1)-'0';
					num1=num1.substring(0, num1.length()-1);
				}
				int two=0;
				if(num2.length()!=0) {
					two=num2.charAt(num2.length()-1)-'0';
					num2=num2.substring(0, num2.length()-1);
				}
				int sum=one+two+carray;
				carray=sum/10;
				int digit=sum%10;
				ans=digit+ans;
			}
			if(carray!=0) ans="1"+carray;
			return ans;
		}
		
		//Question 4
		public static String  reverseWordsOfString(String s) {
			String ans="";
			String arr[]=s.split(" ");
			for(int i=0; i<arr.length; i++) {
				String temp="";
				for(int j=0; j<arr[i].length(); j++) {
					temp=arr[i].charAt(j)+temp;
				}
				ans+=" "+temp;
			}
			return ans.trim();
		}
		
		
		//Question 5
		public static String reverseKChar(String s, int k) {
			String ans="";
			int m=0;
			while(s.length()!=0) {
				String temp="";
				if(k<=s.length() && m%2==0) {
					temp=s.substring(0, k);
					String l="";
					for(int i=0; i<temp.length(); i++) l=temp.charAt(i)+l;
					s=s.substring(k);
					ans+=l;
					m++;
				}else {
					if(k>s.length()) {
						ans+=s;
						break;
					}else {
						ans+=s.substring(0, k);
						s=s.substring(k);
					}
					m++;
				}
			}
			return ans;
		}
		
		  //Question 6
		public static boolean shift(String s, String goal) {
			HashMap<Character, Integer> hm=new HashMap<>();
			for(int i=0; i<s.length(); i++) hm.put(s.charAt(i), hm.getOrDefault(s.charAt(i), 0)+1);
			for(int i=0; i<goal.length(); i++) {
				if(hm.containsKey(goal.charAt(i))) {
					if(hm.get(goal.charAt(i))==1) hm.remove(goal.charAt(i));
					else hm.put(goal.charAt(i), hm.get(goal.charAt(i)-1));
				}
			}
			if(hm.size()==0) return true;
			return false;
		}
		
		//Question 7
		public static boolean backspace(String s, String t) {
			String one="", two="";
			for(int i=0; i<s.length(); i++) {
				if(s.charAt(i)=='#') {
					one=one.substring(0, one.length()-1);
				}else one+=s.charAt(i);
			}
			for(int i=0; i<t.length(); i++) {
				if(t.charAt(i)=='#') {
					two=two.substring(0, two.length()-1);
				}else two+=t.charAt(i);
			}
			return one.equals(two);
		}
