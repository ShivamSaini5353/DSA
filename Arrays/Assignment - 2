                //Question 1
		public static int maxPossibleSum(int arr[]) {
			int i=0, n=arr.length, ans=0;
			while(i<n) {
				int one=Math.min(arr[i], arr[i+1]) + Math.min(arr[i+1], arr[i+2]);
				int two=Math.min(arr[i], arr[i+2])+ Math.min(arr[i+1], arr[i+3]);
				int three=Math.min(arr[i], arr[i+3])+ Math.min(arr[i+2], arr[i+3]);
				ans=Math.max(one, Math.max(two, three));
				i=i+4;
				if(i+4>=n)break;
			}
			return ans;
		}
	
	
	        //Question 2
		public static int maxCandy(int arr[]) {
			int ans=0, n=arr.length;
			HashMap<Integer, Integer> tm=new HashMap<>();
			for(int i=0; i<n; i++) tm.put(arr[i], tm.getOrDefault(arr[i], 0)+1);
			PriorityQueue<Integer> pq=new PriorityQueue<>(Comparator.reverseOrder());
			for(Integer i:tm.keySet()) pq.add(tm.get(i));
			while(!pq.isEmpty()) {
				int first=pq.poll()-1;
				int second=pq.poll()-1;
				if(first!=0) pq.add(first);
				if(second!=0) pq.add(second);
				ans++;
				if(pq.size()==1) return ans;
			}
			return ans;
		}
		
		//Question 3
		public static int maxSubsequence(int arr[]) {
			int ans=0, n=arr.length;
			for(int i=0; i<n; i++) {
				int prev=arr[i], count=1;
				for(int j=i+1; j<n; j++) {
					if(Math.abs(arr[j]-prev)==1 || Math.abs(arr[j]-prev)==0) count++;
				}
				ans=Math.max(ans, count);
			}
			return ans;
		}
		
		//Question 4
		public static boolean isPossiblePlant(int arr[], int n) {
			int ans=0, count=0, m=arr.length;
			int arr2[]=arr.clone();
				for(int i=0; i<m; i++) {
					if(i==0) {
						if(i+1<m && arr[i]==0 && arr[i+1]==0) {
							count++;
							arr[i]=1;
						}
					}else if(i==m-1) {
						if(i>=0 && arr[i]==0 && arr[i-1]==0) count++;
					}else {
						if(arr[i-1]==0 && arr[i]==0 && arr[i+1]==0) {
							arr[i]=1;
							count++;
						}
					}
				}
				ans=Math.max(ans, count); 
				count=0;
				for(int i=1; i<m; i++) {
					 if(i==m-1) {
						 if(i>=0 && arr2[i]==0 && arr2[i-1]==0) count++;
					 }else {
						if(arr2[i-1]==0 && arr2[i]==0 && arr2[i+1]==0) {
							arr2[i]=1;
							count++;
						}
					}
				}
				ans=Math.max(ans, count);
				if(ans>=n) return true;
			return false;
		}

		
		//Question 5
		public static int maximumProduct(int arr[]) {
			int ans=1, count=3;
			PriorityQueue<Integer> pq=new PriorityQueue<>(Comparator.reverseOrder());
			for(int i=0; i<arr.length; i++) pq.add(arr[i]);
			while(!pq.isEmpty() && count>0) {
				ans*=pq.poll();
				count--;
			}
			return ans;
		}
		
		
		//Question 6
		public static int searchElement(int arr[], int target) {
			int st=0, en=arr.length-1;
			while(st<=en) {
				int mid=st+(en-st)/2;
				if (arr[mid]==target) {
					return mid;
				}else if(arr[mid]>target) en=mid-1;
				else st=mid+1;
			}
			return -1;
		}

	
		//Question 7
		public static boolean isMonotone(int arr[]) {
			int i=0, j=0, n=arr.length;
			boolean inc=true;
			boolean dec=true;
			while(i<n-1) {
				if(arr[i]>arr[i+1]) inc=false;
				i++;
			}
			while(j<n-1) {
				if(arr[j]<arr[j+1]) dec=false;
				j++;
			}
			if(!inc && !dec) return false;
			return true;
		}

		
		//Question 8
		public static int maxScore(int arr[], int k) {
			int min=Integer.MAX_VALUE, max=Integer.MIN_VALUE;
			for(int i=0; i<arr.length; i++) {
				min=Math.min(min, arr[i]);
				max=Math.max(max, arr[i]);
			}
			return max-min+k;
		}
